#!/usr/bin/env bash
#
# System-Info
# Copyright (C) 2013-2024 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

# Bash options:
set -eu


export TEXTDOMAIN="System-Info"
# export TEXTDOMAINDIR="${PWD}/locale"   # Default: "/usr/share/locale"

# shellcheck disable=SC1091
. gettext.sh


# ###### Settings ###########################################################
indent=20
colorBasic="\x1b[33m"
colorNetwork="\x1b[34m"
colorPrefix="\x1b[94m"
colorInactive="\x1b[37m"
colorNone="\x1b[0m"


# ###### Print banners ######################################################
function print-banners ()
{
   # shellcheck disable=SC2068
   for directory in $@ ; do
      if [ -d "${directory}" ] ; then
         bannerScripts=$(find "${directory}" -maxdepth 1 -type f -name "[0-9][0-9]*[^~]" | sort -r)
         for bannerScript in ${bannerScripts} ; do
            ${bannerScript} || break
         done
      fi
   done
}


# ###### Print system information ###########################################
function print-system-information ()
{
   # ====== Obtain system information =======================================
   eval $(./get-system-info)

   # ====== Obtain user information =========================================
   local users="$(who | cut -d' ' -f1 | sort -ud | wc -l)"
   local processes="$(ps -aex -o pid= | wc -l)"

   # ====== Obtain disk information =========================================
   local diskRoot=$(env LANGUAGE=en df -hT /     | grep -vE "^Filesystem|shm" | awk '{ print $6 }' | tr -d '%')
   local diskHome=$(env LANGUAGE=en df -hT /home | grep -vE "^Filesystem|shm" | awk '{ print $6 }' | tr -d '%')

   # ====== Obtain operating system information =============================
   DISTRIB_ID="$(eval_gettext "Unknown")"   # Unknown, yet.
   DISTRIB_RELEASE="${DISTRIB_ID}"          # Unknown, yet.
   DISTRIB_CODENAME=""

   # ------ Get information from /etc/os-release ----------------------------
   if [ -e /etc/os-release ] ; then
      # shellcheck disable=SC1091
      . /etc/os-release
      if [ -v NAME ] ; then
         DISTRIB_ID="${NAME}"
      fi
      if [ -v VERSION_ID ] ; then
         DISTRIB_RELEASE="${VERSION_ID}"
      fi
      if [ -v VERSION ] && [[ "${VERSION}" =~ ^.*\(([^\(\)]*)\)$ ]] ; then
         DISTRIB_CODENAME="${BASH_REMATCH[1]}"
      elif [ -v VERSION_CODENAME ] ; then
         DISTRIB_CODENAME="${VERSION_CODENAME}"
      fi

   # ------ Legacy system: try lsb_release ----------------------------------
   elif [ -x /usr/bin/lsb_release ] ; then
      DISTRIB_ID="$(/usr/bin/lsb_release -is)"
      DISTRIB_RELEASE="$(/usr/bin/lsb_release -rs)"
      DISTRIB_CODENAME="$(/usr/bin/lsb_release -cs)"
   fi

   local codeNameText=""
   if [ "${DISTRIB_CODENAME}" != "" ] ; then
      codeNameText=" (${DISTRIB_CODENAME})"
   fi
   os_label="${DISTRIB_ID} ${DISTRIB_RELEASE}${codeNameText}"


   # ====== Print system information ========================================
   echo -en "${colorBasic}"

   # ------ Hostname -------------------------------------------------------
   printf "%-${indent}s%s\n" \
      "$(eval_gettext "Host:")" \
      "${hostname_long}"

   # ------ Uptime ----------------------------------------------------------
   printf "%-${indent}s$(eval_gettext "%s, %s, %s, and %s")\n" \
      "$(eval_gettext "Uptime:")" \
      "$(printf "$(eval_ngettext "%'d day" "%'d days" "${uptime_days}")" "${uptime_days}")" \
      "$(printf "$(eval_ngettext "%'d hour" "%'d hours" "${uptime_hours}")" "${uptime_hours}")" \
      "$(printf "$(eval_ngettext "%'d minute" "%'d minutes" "${uptime_mins}")" "${uptime_mins}")" \
      "$(printf "$(eval_ngettext "%'d second" "%'d seconds" "${uptime_secs}")" "${uptime_secs}")"

   # ------ Operating System ------------------------------------------------
   printf "%-${indent}s%s $(eval_gettext "with kernel") %s\n" \
      "$(eval_gettext "Operating System:")" \
      "${os_label}" \
      "${system_release}"

   # ------ Processor -------------------------------------------------------
   processesString="$(eval_gettext "%'d processes")"
   usersString="$(eval_ngettext "%'d user" "%'d users" "${users}")"
   printf "%-${indent}s$(eval_gettext "%d Ã— %s; ${processesString}; ${usersString}")\n" \
      "$(eval_gettext "Processor:")" \
      "${system_cores}" \
      "${system_machine}" \
      "${processes}" \
      "${users}"

   # ------ Load ------------------------------------------------------------
   # NOTE: Using /usr/bin/printf here, not the buggy built-in function!
   /usr/bin/printf "%-${indent}s$(eval_gettext "%1.1f %% / %1.1f %% / %1.1f %%")\n" \
      "$(eval_gettext "Load (1/5/15 min):")" \
      "${system_load_avg1min}" \
      "${system_load_avg5min}" \
      "${system_load_avg15min}"

   # ------ Memory ---------------------------------------------------------
   # NOTE: Using /usr/bin/printf here, not the buggy built-in function!
   /usr/bin/printf "%-${indent}s$(eval_gettext "%'6.0f MiB of %'6.0f MiB (%'6.0f MiB available: %'5.1f %%)")\n" \
      "$(eval_gettext "Used Memory:")"  \
      "$((system_mem_used  / 1048576))" \
      "$((system_mem_total / 1048576))" \
      "$((system_mem_free  / 1048576))" \
      "${system_mem_freepct}"
   if [ ${system_swap_total} -gt 0 ] ; then
      # NOTE: Using /usr/bin/printf here, not the buggy built-in function!
      /usr/bin/printf "%-${indent}s$(eval_gettext "%'6.0f MiB of %'6.0f MiB (%'6.0f MiB available: %'5.1f %%)")\n" \
      "$(eval_gettext "Used Swap:")"  \
      "$((system_swap_used  / 1048576))" \
      "$((system_swap_total / 1048576))" \
      "$((system_swap_free  / 1048576))" \
      "${system_swap_freepct}"
   else
      printf "%-${indent}s" "$(eval_gettext "Used Swap:")"
      echo -en "${colorInactive}"
      eval_gettext "no swap available!"
      echo -e "${colorBasic}"
   fi

   # ------ Storage ---------------------------------------------------------
   # NOTE: Using /usr/bin/printf here, not the buggy built-in function!
   /usr/bin/printf "%-${indent}s$(eval_gettext "%1.0f %% on /, %1.0f %% on /home")\n" \
      "$(eval_gettext "Used Diskspace:")" \
      "${diskRoot}" \
      "${diskHome}"

   # ------ SSH Key Fingerprints --------------------------------------------
   print-ssh-key-fingerprints

   # ------ Network ---------------------------------------------------------
   printf "%-${indent}s\n" "$(eval_gettext "Network:")"
   local indentString="$(printf "%-${indent}s" "")"
   for interface in ${netif_all} ; do
      local flagsVariable="netif_${interface}_flags"
      local ipv4Variable="netif_${interface}_ipv4"
      local ipv6Variable="netif_${interface}_ipv6"

      if [[ "${!flagsVariable}" =~ (<UP>) ]] ; then
         # Interface is UP
         colorA="${colorNetwork}"
         colorP="${colorPrefix}"
      else
         # Interface is DOWN
         colorA="${colorInactive}"
         colorP="${colorInactive}"
      fi

      local ipv4
      local ipv6
      if [ -v "${ipv4Variable}" ] ; then
         ipv4="${!ipv4Variable}"
         ipv4="${ipv4// /${colorA} }"
         ipv4="${ipv4//\//${colorP}\/}"
         ipv4="${ipv4// /   }"
         ipv4="${ipv4//\// \/ }"
      else
         ipv4="$(eval_gettext "(No IPv4)")"
      fi
      if [ -v "${ipv6Variable}" ] ; then
         ipv6="${!ipv6Variable}"
         ipv6="${ipv6// /${colorA} }"
         ipv6="${ipv6//\//${colorP}\/}"
         ipv6="${ipv6// /\\n${indentString}}"
         ipv6="${ipv6//\// \/ }"
         ipv6="${ipv6//%/%%}"
         ipv6="\n${indentString}${ipv6}"
      else
         ipv6=""
      fi

      printf "${colorA}%-${indent}s${colorA}${ipv4}${colorA}${ipv6}${colorA}\n"   "   ${interface}:"

   done

   echo -en "${colorNone}"
}


# ###### Print SSH public key fingerprints ##################################
function print-ssh-key-fingerprints ()
{
   if [ -d /etc/ssh ] ; then
      echo -en "${colorBasic}"
      local keys=$(find /etc/ssh -maxdepth 1 -name "ssh_host_*.pub" | sort)
      local keyNumber=1
      local label=""
      for key in $keys ; do
         keyInfo="$(ssh-keygen -lf "$key" | sed -e "s/^\([0-9]*\) \([^ ]*\) \(.*\) (\(.*\))$/\2 (\4 \1)/g")"
         if [[ "${keyInfo}" =~ ^[A-Z]+ ]] ; then
             if [ ${keyNumber} -eq 1 ] ; then
               label="$(gettext "SSH Keys:")"
            else
               label=""
            fi
            printf "%-${indent}s%s%s %s\n" \
               "${label}" \
               "$(eval_gettext "#\${keyNumber} " "${keyNumber}")" \
               "${keyInfo}"
            keyNumber=$((keyNumber+1))
         fi
      done
      echo -en "${colorNone}"
   fi
}



# ###### Main program #######################################################

# ====== Handle arguments ===================================================
# shellcheck disable=SC2034
now=$(date)
system=$(uname)
scriptDirectories="/etc/system-info.d /usr/local/etc/system-info.d"

while [ $# -gt 0 ] ; do
   if [ "$1" == "[--scripts" ] || [ "$1" == "-S" ] ; then
      scriptDirectories="$2"
      shift
   else
      echo >&2 "Usage: $0 [--help|-h] [--scripts|-S scripts_directory]"
      exit 1
   fi
   shift
done


# ====== Startup ============================================================
echo -e "\n$(eval_gettext "System information as of \${now}")\n"

# ====== Obtain and print information =======================================
# Getting the network information may take a few hundreds of ms on a router
# => prepare it in background, while printing other information.
# shellcheck disable=SC2086
(
   echo ""
   print-system-information
) 2>&1 | (
   print-banners ${scriptDirectories}
   wait
   cat
) | \
(
   # Try output via mbuffer. This is faster for console printing, particularly
   # with complex banners and long interface lists. If unavailable, try buffer.
   # Just use cat as fallback, if neither mbuffer nor buffer are available.
   if ! mbuffer -q -s 16k 2>/dev/null ; then
      if ! buffer -s 16k 2>/dev/null ; then
         cat
      fi
   fi
)

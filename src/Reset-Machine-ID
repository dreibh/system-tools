#!/usr/bin/env bash
#
# Reset Machine ID
# Copyright (C) 2013-2024 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


# SSH key settings:
ECDSA_BITS=521
RSA_BITS=16384
# MODULI_BITS=8192


# ###### Show host key fingerprints #########################################
show-keys ()
{
   keys=$(find /etc/ssh -name "ssh_host_*.pub" | sort)
   firstKey=1
   for key in $keys ; do
      if [ $firstKey -eq 1 ] ; then
         echo -n "SSH Keys: "
         firstKey=0
      else
         echo -n "          "
      fi
      ssh-keygen -lf "$key" | sed -e "s/^\([0-9]*\) \([^ ]*\) \(.*\) (\(.*\))$/\2 (\4 \1)/g"
   done
}



# ###### Main program #######################################################

# ====== Handle arguments ===================================================
YES_TO_ALL=0
OLD_HOSTNAME_FQDN="$(hostname -f)"
OLD_HOSTNAME="${OLD_HOSTNAME_FQDN//.*/}"
NEW_HOSTNAME_FQDN="${OLD_HOSTNAME_FQDN}"
applyChanges=""
if [ "$1" == "--yes-to-all-i-am-really-sure" ] || [ "$1" == "-yes-to-all-i-am-really-sure" ] ; then
   YES_TO_ALL=1
   applyChanges="yes"
elif [ "$1" == "--hostname" ] || [ "$1" == "-H" ] || [ "$1" == "-hostname" ] ; then
   if [[ ! "$2" =~ ^([a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]\.)+[a-zA-Z]+$ ]] ; then
      echo >&2 "ERROR: Bad hostname $2!"
      exit 1
   fi
   NEW_HOSTNAME_FQDN="$2"
   NEW_HOSTNAME="${NEW_HOSTNAME_FQDN//.*/}"
   shift
fi


# ====== Change hostname ====================================================
if [ "${OLD_HOSTNAME_FQDN}" != "${NEW_HOSTNAME_FQDN}" ] ; then
   if [ ${YES_TO_ALL} -ne 1 ] ; then
      echo -en "\x1b[34m$(date +%FT%H:%M:%S): Change hostname from ${OLD_HOSTNAME_FQDN} to ${NEW_HOSTNAME_FQDN}? [yes/no]?\x1b[0m "
      read -er applyChanges
   fi
   if [ "${applyChanges}" = "yes" ] || [ "${applyChanges}" = "y" ] ; then

      # ====== Update /etc/hosts ============================================
      while read -r line ; do

         if [[ "${line}" =~ ^(127\.0.\0.1|127\.0\.1\.1|::1)[[:blank:]] ]] ; then
            currentNames="$(echo "${line}" | sed -e 's/^[0-9a-fA-F\.:]*[[:blank:]]*//g' -e 's/[[:blank:]][[:blank:]]*/\n/g' | sort -u)"
            newNames="${NEW_HOSTNAME_FQDN}"
            if [ "${NEW_HOSTNAME}" != "${NEW_HOSTNAME_FQDN}" ] ; then
               newNames="${newNames} ${NEW_HOSTNAME}"
            fi
            for currentName in ${currentNames} ; do
               if [[ "${currentName}" =~ ^(localhost|localhost[46]|ip6-localhost|ip6-loopback)(\..*$|$) ]] ; then
                  newNames="${newNames} ${currentName}"
               #else
                  #echo >&2 "${currentName} DDD"
               fi

            done

            # shellcheck disable=SC2001
            line="$(echo "${line}" | sed -e "s/\([[:blank:]][[:blank:]]*\).*$/\1${newNames}/g")"

         elif [[ "${line}" =~ ^(([0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3})|((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?)[[:blank:]] ]] ; then
            # shellcheck disable=SC2001
            line="$(echo "${line}" | sed -e "s/${OLD_HOSTNAME_FQDN}/${NEW_HOSTNAME_FQDN}/g")"
         fi

         echo "${line}"

      done </etc/hosts >hosts.updated
      echo "/etc/hosts:"
      diff --color=always /etc/hosts /etc/hosts.updated


      # ====== Update /etc/hostname or /etc/rc.conf =========================
      if [ -e /etc/hostname ] ; then
         echo "${NEW_HOSTNAME_FQDN}" >/etc/hostname.updated
         echo "/etc/hostname:"
         diff --color=always /etc/hostname /etc/hostname.updated
      elif [ -e /etc/rc.conf ] ; then
         echo "/etc/rc.conf:"
         sed -e "s/^hostname=/hostname=\"${NEW_HOSTNAME_FQDN}\"/g" \
            </etc/rc.conf >/etc/rc.conf.updated
         diff --color=always /etc/rc.conf /etc/rc.conf.updated
      fi


      # ====== Apply changes ================================================
      if [ ${YES_TO_ALL} -ne 1 ] ; then
         echo -en "\x1b[34m$(date +%FT%H:%M:%S): Apply hostname changes? [yes/no]?\x1b[0m "
         read -er applyChanges
      fi
      if [ "${applyChanges}" = "yes" ] || [ "${applyChanges}" = "y" ] ; then
         echo mv /etc/hosts.updated /etc/hosts
         if [ -e /etc/hostname ] ; then
            echo mv /etc/hostname.updated /etc/hostname

         elif [ -e /etc/rc.conf ] ; then
            echo mv /etc/rc.conf.updated /etc/rc.conf
         fi
      fi

      exit 1

   fi
fi


# ====== Reset machine ID ===================================================
if [ -e /etc/machine-id ] ; then
   if [ ${YES_TO_ALL} -ne 1 ] ; then
      echo -en "\x1b[34m$(date +%FT%H:%M:%S): The current machine ID is $(cat /etc/machine-id). Reset it? [yes/no]?\x1b[0m "
      read -er applyChanges
   fi
   if [ "${applyChanges}" = "yes" ] || [ "${applyChanges}" = "y" ] ; then
      if [ -x /usr/bin/dbus-uuidgen ] || [ -x /usr/local/bin/dbus-uuidgen ] ; then
         # Generate new ID already now.
         rm -f /etc/machine-id
         dbus-uuidgen --ensure=/etc/machine-id
      else
         # The ID should be reset during the next boot.
         echo -n | tee /etc/machine-id
      fi
      if [ -e /var/lib/dbus/machine-id ] ; then
         rm /var/lib/dbus/machine-id
         ln -s /etc/machine-id /var/lib/dbus/machine-id
      fi
      echo "The new machine ID is $(cat /etc/machine-id)."
   fi
fi


# ====== SSH configuration ==================================================
if [ -d /etc/ssh ] ; then
   cd /etc/ssh || exit

   # ====== Suggest sshd_config updates =====================================
   port=$(grep "^Port[[:blank:]]" /etc/ssh/sshd_config | tr '\t' ' ' | tr -s ' ' | cut -d' ' -f2)
   p1=$(grep "^PasswordAuthentication[[:blank:]]" /etc/ssh/sshd_config | tr '\t' ' ' | tr -s ' ' | cut -d' ' -f2)
   p2=$(grep "^KbdInteractiveAuthentication[[:blank:]]" /etc/ssh/sshd_config | tr '\t' ' ' | tr -s ' ' | cut -d' ' -f2)
   if [[ ! "${port}" =~ ^[0-9]+$ ]] ; then
      port="22"
   fi
   if [ "${p1}" != "yes" ] && [ "${p1}" != "no" ]  ; then
      p1="yes"
   fi
   if [ "${p2}" != "yes" ] && [ "${p2}" != "no" ]  ; then
      p2="yes"
   fi
   cat >sshd_config.suggested <<EOF
Protocol 2

Port ${port}

# Check supported algorithms with "ssh -Q cipher|mac|kex|key|PubkeyAcceptedAlgorithms|HostbasedAcceptedKeyTypes|HostbasedAcceptedKeyTypes"!
Ciphers                      aes256-gcm@openssh.com,chacha20-poly1305@openssh.com
MACs                         hmac-sha2-512-etm@openssh.com
KexAlgorithms                curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512
# The following options are only available on up-to-date SSH servers:
PubkeyAcceptedKeyTypes       ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,rsa-sha2-512
HostbasedAcceptedKeyTypes    ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,ssh-rsa-cert-v01@openssh.com,ssh-rsa
HostKeyAlgorithms            ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,ssh-rsa-cert-v01@openssh.com,ssh-rsa

UsePAM                       yes
X11Forwarding                yes
TCPKeepAlive                 yes
ClientAliveInterval          60
ClientAliveCountMax          3

# To disable password usage, set *both* values to "no":
# KbdInteractiveAuthentication uses PAM, which usually just means using a password.
PasswordAuthentication       ${p1}
KbdInteractiveAuthentication ${p2}

AcceptEnv                    LANG LC_*
EOF
   for sftp in /usr/lib/openssh/sftp-server /usr/libexec/sftp-server ; do
      if [ -e "$sftp" ] ; then
         (
            echo ""
            echo "Subsystem sftp $sftp"
         ) >>sshd_config.suggested
         break
      fi
   done


   # ====== Suggest ssh_config updates ======================================
   cat >ssh_config.suggested <<EOF
Protocol 2

# Check supported algorithms with "ssh -Q cipher|mac|kex|key"!
Ciphers                   aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr
MACs                      hmac-sha2-512-etm@openssh.com,hmac-sha2-512,hmac-sha2-256-etm@openssh.com
KexAlgorithms             curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256
# To prefer RSA:
# HostKeyAlgorithms         ssh-rsa-cert-v01@openssh.com,ssh-rsa,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com
# To prefer ED25519:
HostKeyAlgorithms         ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519,ssh-rsa-cert-v01@openssh.com,ssh-rsa,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com

VerifyHostKeyDNS          ask
HashKnownHosts            yes
GSSAPIAuthentication      yes
GSSAPIDelegateCredentials no

TCPKeepAlive              yes
ServerAliveInterval       30
ServerAliveCountMax       3

SendEnv                   LANG LC_*
EOF


   # ====== Apply ssh_config updates ========================================
   echo "Suggested ssh_config change:"
   if ! diff --color=always ssh_config ssh_config.suggested ; then
      if [ ${YES_TO_ALL} -ne 1 ] ; then
         echo -en "\x1b[34m$(date +%FT%H:%M:%S): Replace ssh_config? [yes/no]?\x1b[0m "
         read -er applyChanges
      fi
      if [ "${applyChanges}" = "yes" ] || [ "${applyChanges}" = "y" ] ; then
         cp ssh_config ssh_config.old
         mv ssh_config.suggested ssh_config
      else
         echo "Skipped!"
      fi
   fi


   # ====== Apply sshd_config updates =======================================
   echo "Suggested sshd_config change:"
   if ! diff --color=always sshd_config sshd_config.suggested ; then
      if [ ${YES_TO_ALL} -ne 1 ] ; then
         echo -en "\x1b[34m$(date +%FT%H:%M:%S): Replace sshd_config? [yes/no]?\x1b[0m "
         read -er applyChanges
      fi
      if [ "${applyChanges}" = "yes" ] || [ "${applyChanges}" = "y" ] ; then
         cp sshd_config sshd_config.old
         mv sshd_config.suggested sshd_config
      else
         echo "Skipped!"
      fi
   fi


   # ====== Remove Cloud-Init sshd configuration ============================
   if [ -e /etc/ssh/sshd_config.d/50-cloud-init.conf ] ; then
      echo "Suggested removal of /etc/ssh/sshd_config.d/50-cloud-init.conf:"
      cat /etc/ssh/sshd_config.d/50-cloud-init.conf
      if [ ${YES_TO_ALL} -ne 1 ] ; then
         echo -en "\x1b[34m$(date +%FT%H:%M:%S): Remove /etc/ssh/sshd_config.d/50-cloud-init.conf? [yes/no]?\x1b[0m "
         read -er applyChanges
      fi
      if [ "${applyChanges}" = "yes" ] || [ "${applyChanges}" = "y" ] ; then
         rm /etc/ssh/sshd_config.d/50-cloud-init.conf
      else
         echo "Skipped!"
      fi
   fi


   # ====== Generate new SSH key pair =======================================
   if [ ${YES_TO_ALL} -ne 1 ] ; then
      echo -en "\x1b[34m$(date +%FT%H:%M:%S): Remove existing SSH host keys and generate new ones? [yes/no]?\x1b[0m "
      read -er applyChanges
   fi
   if [ "${applyChanges}" = "yes" ] || [ "${applyChanges}" = "y" ] ; then
      BACKUP_DIRECTORY="backup-$(env LANG=C date +%FT%H:%M:%S)"

      echo "Making backup in ${BACKUP_DIRECTORY} ..."
      mkdir "${BACKUP_DIRECTORY}/"
      find . -maxdepth 1 -name "ssh_host_*_key*" | xargs -n1 -I § -r mv § "${BACKUP_DIRECTORY}/"
      find . -maxdepth 1 -name "ssh_host_key*"   | xargs -n1 -I § -r mv § "${BACKUP_DIRECTORY}/"
      find . -maxdepth 1 -name "moduli*"         | xargs -n1 -I § -r cp § "${BACKUP_DIRECTORY}/"
      cp sshd_config "${BACKUP_DIRECTORY}/"
      cp ssh_config  "${BACKUP_DIRECTORY}/"

      # rm -f moduli.candidates moduli
      # echo "Generating moduli, step 1 ..."
      # time ssh-keygen -G moduli.candidates -b $MODULI_BITS
      # echo "Generating moduli, step 2 ..."
      # time ssh-keygen -T moduli -f moduli.candidates

      echo "Generating ED25519 key ..."
      time ssh-keygen -N "" -t ed25519 -f ssh_host_ed25519_key
      echo "Generating ED25519 key ..."
      time ssh-keygen -N "" -t ecdsa -b $ECDSA_BITS -f ssh_host_ecdsa_key
      echo "Generating RSA key ..."
      time ssh-keygen -N "" -t rsa -b $RSA_BITS -f ssh_host_rsa_key

      echo "Done!"

   else
      echo "Skipped!"
   fi

fi

#!/usr/bin/env bash

# Bash options:
set -eu


export TEXTDOMAIN="System-Info"
# export TEXTDOMAINDIR="${PWD}/locale"   # Default: "/usr/share/locale"

# shellcheck disable=SC1091
. gettext.sh


# ###### Print system information ###########################################
function print-system-information ()
{
   # ====== Obtain system information =======================================
   eval $(./get-system-info)

   # ====== Obtain user information =========================================
   users=$(who | awk ' { print $1 }' | sort -ud | wc -l)
   processes=$(ps -aex -o pid= | wc -l)

   # ====== Obtain disk information =========================================
   diskRoot=$(env LANGUAGE=en df -hT /     | grep -vE "^Filesystem|shm" | awk '{ print $6 }' | tr -d '%')
   diskHome=$(env LANGUAGE=en df -hT /home | grep -vE "^Filesystem|shm" | awk '{ print $6 }' | tr -d '%')

   # ====== Obtain operating system information =============================
   DISTRIB_ID="$(eval_gettext "Unknown")"   # Unknown, yet.
   DISTRIB_RELEASE="${DISTRIB_ID}"          # Unknown, yet.
   DISTRIB_CODENAME=""

   # ------ Get information from /etc/os-release ----------------------------
   if [ -e /etc/os-release ] ; then
      # shellcheck disable=SC1091
      . /etc/os-release
      if [ -v NAME ] ; then
         DISTRIB_ID="${NAME}"
      fi
      if [ -v VERSION_ID ] ; then
         DISTRIB_RELEASE="${VERSION_ID}"
      fi
      if [ -v VERSION ] && [[ "${VERSION}" =~ ^.*\(([^\(\)]*)\)$ ]] ; then
         DISTRIB_CODENAME="${BASH_REMATCH[1]}"
      elif [ -v VERSION_CODENAME ] ; then
         DISTRIB_CODENAME="${VERSION_CODENAME}"
      fi

   # ------ Legacy system: try lsb_release ----------------------------------
   elif [ -x /usr/bin/lsb_release ] ; then
      DISTRIB_ID="$(/usr/bin/lsb_release -is)"
      DISTRIB_RELEASE="$(/usr/bin/lsb_release -rs)"
      DISTRIB_CODENAME="$(/usr/bin/lsb_release -cs)"
   fi

   codeNameText=""
   if [ "${DISTRIB_CODENAME}" != "" ] ; then
      codeNameText=" (${DISTRIB_CODENAME})"
   fi
   os_label="${DISTRIB_ID} ${DISTRIB_RELEASE}${codeNameText}"


   # ====== Print system information ========================================
   indent=20
   colorBasic="\x1b[33m"
   colorNetwork="\x1b[34m"
   colorPrefix="\x1b[94m"
   colorInactive="\x1b[37m"
   colorNone="\x1b[0m"

   echo -en "${colorBasic}"

   # ------ Hostname -------------------------------------------------------
   printf "%-${indent}s%s\n" \
      "$(eval_gettext "Host:")" \
      "${hostname_long}"

   # ------ Uptime ----------------------------------------------------------
   printf "%-${indent}s$(eval_gettext "%s, %s, %s, and %s")\n" \
      "$(eval_gettext "Uptime:")" \
      "$(printf "$(eval_ngettext "%'d day" "%'d days" "${uptime_days}")" "${uptime_days}")" \
      "$(printf "$(eval_ngettext "%'d hour" "%'d hours" "${uptime_hours}")" "${uptime_hours}")" \
      "$(printf "$(eval_ngettext "%'d minute" "%'d minutes" "${uptime_mins}")" "${uptime_mins}")" \
      "$(printf "$(eval_ngettext "%'d second" "%'d seconds" "${uptime_secs}")" "${uptime_secs}")"

   # ------ Operating System ------------------------------------------------
   printf "%-${indent}s%s $(eval_gettext "with kernel") %s\n" \
      "$(eval_gettext "Operating System:")" \
      "${os_label}" \
      "${system_release}"

   # ------ Processor -------------------------------------------------------
   processesString="$(eval_gettext "%'d processes")"
   usersString="$(eval_ngettext "%'d user" "%'d users" "${users}")"
   printf "%-${indent}s$(eval_gettext "%d Ã— %s; ${processesString}; ${usersString}")\n" \
      "$(eval_gettext "Processor:")" \
      "${system_cores}" \
      "${system_machine}" \
      "${processes}" \
      "${users}"

   # ------ Load ------------------------------------------------------------
   # NOTE: Using /usr/bin/printf here, not the buggy built-in function!
   /usr/bin/printf "%-${indent}s$(eval_gettext "%1.1f %% / %1.1f %% / %1.1f %%")\n" \
      "$(eval_gettext "Load (1/5/15 min):")" \
      "${system_load_avg1min}" \
      "${system_load_avg5min}" \
      "${system_load_avg15min}"

   # ------ Memory ---------------------------------------------------------
   # NOTE: Using /usr/bin/printf here, not the buggy built-in function!
   /usr/bin/printf "%-${indent}s$(eval_gettext "%'6.0f MiB of %'6.0f MiB (%'6.0f MiB available: %'5.1f %%)")\n" \
      "$(eval_gettext "Used Memory:")"  \
      "$((system_mem_used  / 1048576))" \
      "$((system_mem_total / 1048576))" \
      "$((system_mem_free  / 1048576))" \
      "${system_mem_freepct}"
   if [ ${system_swap_total} -gt 0 ] ; then
      # NOTE: Using /usr/bin/printf here, not the buggy built-in function!
      /usr/bin/printf "%-${indent}s$(eval_gettext "%'6.0f MiB of %'6.0f MiB (%'6.0f MiB available: %'5.1f %%)")\n" \
      "$(eval_gettext "Used Swap:")"  \
      "$((system_swap_used  / 1048576))" \
      "$((system_swap_total / 1048576))" \
      "$((system_swap_free  / 1048576))" \
      "${system_swap_freepct}"
   else
      printf "%-${indent}s" "$(eval_gettext "Used Swap:")"
      echo -en "${colorInactive}"
      eval_gettext "no swap available!"
      echo -e "${colorBasic}"
   fi

   # ------ Storage ---------------------------------------------------------
   # NOTE: Using /usr/bin/printf here, not the buggy built-in function!
   /usr/bin/printf "%-${indent}s$(eval_gettext "%1.0f %% on /, %1.0f %% on /home")\n" \
      "$(eval_gettext "Used Diskspace:")" \
      "${diskRoot}" \
      "${diskHome}"

   # ------ Network ---------------------------------------------------------
   printf "%-${indent}s\n" "$(eval_gettext "Network:")"
   local indentString="$(printf "%-${indent}s" "")"
   for interface in ${netif_all} ; do
      local flagsVariable="netif_${interface}_flags"
      local ipv4Variable="netif_${interface}_ipv4"
      local ipv6Variable="netif_${interface}_ipv6"

      if [[ "${!flagsVariable}" =~ (<UP>) ]] ; then
         # Interface is UP
         colorA="${colorNetwork}"
         colorP="${colorPrefix}"
      else
         # Interface is DOWN
         colorA="${colorInactive}"
         colorP="${colorInactive}"
      fi

      local ipv4
      local ipv6
      if [ -v "${ipv4Variable}" ] ; then
         ipv4="${!ipv4Variable}"
         ipv4="${ipv4// /${colorA} }"
         ipv4="${ipv4//\//${colorP}\/}"
         ipv4="${ipv4// /   }"
         ipv4="${ipv4//\// \/ }"
      else
         ipv4="$(eval_gettext "(No IPv4)")"
      fi
      if [ -v "${ipv6Variable}" ] ; then
         ipv6="${!ipv6Variable}"
         ipv6="${ipv6// /${colorA} }"
         ipv6="${ipv6//\//${colorP}\/}"
         ipv6="${ipv6// /\\n${indentString}}"
         ipv6="${ipv6//\// \/ }"
         ipv6="${ipv6//%/%%}"
         ipv6="\n${indentString}${ipv6}"
      else
         ipv6=""
      fi

      printf "${colorA}%-${indent}s${colorA}${ipv4}${colorA}${ipv6}${colorA}\n"   "   ${interface}:"

   done

   echo -en "${colorNone}"
}


print-system-information

# (
#    print-system-information
# ) |
# (
#    # Try output via mbuffer. This is faster for console printing, particularly
#    # with complex banners and long interface lists. If unavailable, try buffer.
#    # Just use cat as fallback, if neither mbuffer nor buffer are available.
#    if ! mbuffer -q -s 16k 2>/dev/null ; then
#       if ! buffer -s 16k 2>/dev/null ; then
#          cat
#       fi
#    fi
# )

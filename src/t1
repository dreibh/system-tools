#!/usr/bin/env bash

system=`uname`
# system=FreeBSD


# ###### Print addresses ####################################################
function showAddresses ()
{
   lastInterface=""
   hasIPv4=0
   while read interface up protocol address prefixlen ; do
      # ====== Get interface status =========================================
      if [ "${up}" == "1" ] ; then
         # Interface is UP
         colorA="\x1b[34m"
         colorP="\x1b[94m"
      else
         # Interface is DOWN
         colorA="\x1b[37m"
         colorP="\x1b[37m"
      fi
      echo -en "${colorA}"

      # ====== Print addresses ==============================================
      if [ "${lastInterface}" != "${interface}" ] ; then
         if [ "${lastInterface}" != "" ] ; then
            echo ""
         fi
         lastInterface="${interface}"
         hasIPv4=0
         printf "   %-14s " "${interface}:"
      fi

      if [ "${protocol}" == "4" ] ; then
         echo -en "${address} ${colorP}/ ${prefixlen}${colorA}   "
         hasIPv4=1
      elif [ "${protocol}" == "6" ] ; then
         if [ ${hasIPv4} -eq 0 ] ; then
            echo -n "(No IPv4)"
         fi
         echo -en "\n                  ${address} ${colorP}/ ${prefixlen}${colorA} "
      fi
   done <<< "$1"
   echo -e "\x1b[0m"
}


# ###### Print network addresses of each interface ##########################
function print-network-addresses ()
{
   # ====== Get Linux network configuration =================================
   if [ "${system}" == "Linux" ] ; then
      read -r -a allTunnelInterfaces <<< "`(ip -4 tunnel show ; ip -6 tunnel show ) | cut -d':' -f1 | sort -u | xargs`"
      addressList=`ip addr show | (
         interface="BAD!"
         hidden=1
         up=0
         while read line ; do
            # ------ Interface name and flags -------------------------------
            if [[ "${line}" =~ ^([0-9]+)(: )([a-zA-Z0-9\.-]+)(@[a-zA-Z0-9\.-]+|)(: <)([^>]*)(>.*)$ ]] ; then
               interface="${BASH_REMATCH[3]}"
               flags=(${BASH_REMATCH[6]//,/ })
               if [[ " ${flags[@]} " =~ UP ]] ; then
                  up=1
               else
                  up=0
               fi
               if [[ " ${flags[@]} " =~ LOOPBACK ]] ; then
                  hidden=1
               elif [[ " ${allTunnelInterfaces[@]} " =~ ${interface} ]] ; then
                  hidden=1
               else
                  hidden=0
               fi
            elif [ ${hidden} -eq 0 ] ; then
               # ------ IPv4 ------------------------------------------------
               if [[ "${line}" =~ ^([ \t]*inet )([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\/([0-9]+)( .*)$ ]] ; then
                  echo -e "${interface}\t${up}\t4\t${BASH_REMATCH[2]}\t${BASH_REMATCH[3]}"
               # ------ IPv6 ---------------------------------------------------
               elif [[ "${line}" =~ ^([ \t]*inet6 )([0-9a-fA-F:]+)\/([0-9]+)( scope [gsh])(.*)$ ]] ; then
                  # This already filters out link local by scope!
                  echo -e "${interface}\t${up}\t6\t${BASH_REMATCH[2]}\t${BASH_REMATCH[3]}"
               fi
               # ------ Not relevant -------------------------------------------
               # else
               #    echo "no match: ${line}"
            fi
         done
      ) | sort -k1,2`

   # ====== Get FreeBSD network configuration ===============================
   else
      addressList=`ifconfig | (
         interface="BAD!"
         loopback=1
         tunnel=0
         up=0
         while read line ; do
            # ------ Interface name and flags -------------------------------
            if [[ "${line}" =~ ^([a-zA-Z0-9\.-]+)(@[a-zA-Z0-9\.-]+|())(: flags=[0-9]+<)([^>]*)(>.*)$ ]] ; then
               interface="${BASH_REMATCH[1]}"
               flags=(${BASH_REMATCH[5]//,/ })
               if [[ " ${flags[@]} " =~ UP ]] ; then
                  up=1
               else
                  up=0
               fi
               if [[ " ${flags[@]} " =~ LOOPBACK ]] ; then
                  loopback=1
               else
                  loopback=0
               fi
            # ------ IPv4 ---------------------------------------------------
            elif [[ "${line}" =~ ^(inet )([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)( netmask )(0x[0-9a-fA-F]{8})(.*)$ ]] ; then
               if [ ${loopback} -eq 0 -a ${tunnel} -eq 0 ] ; then
                  netmask=$(hex-netmask-to-prefixlen "${BASH_REMATCH[4]}")
                  echo -e "${interface}\t${up}\t4\t${BASH_REMATCH[2]}\t${netmask}"
               fi
            # ------ IPv6 ---------------------------------------------------
            elif [[ "${line}" =~ ^(inet6 )([0-9a-fA-F:]+)( prefixlen )([0-9]+)(.*)$ ]] ; then
               # This already filters out link local: fe80:...%<interface>!
               if [ ${loopback} -eq 0 -a ${tunnel} -eq 0 ] ; then
                  echo -e "${interface}\t${up}\t6\t${BASH_REMATCH[2]}\t${BASH_REMATCH[4]}"
               fi
            # ------ Not relevant -------------------------------------------
            # else
            #    echo "no match: ${line}"
            fi
         done
      ) | sort -k1,2`

   fi

   # ====== Print network information =======================================
   echo "Network:"
   showAddresses "${addressList}"
}


print-network-addresses

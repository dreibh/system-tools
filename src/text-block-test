#!/usr/bin/env bash

set -eu

RUN=""
# RUN="valgrind "

make text-block
insertFile="text-block-tests/insert.txt"
failures=0
for mode in cat extract remove replace ; do
   for o1 in include-tags exclude-tags ; do
      for o2 in tags-only full-tag-lines ; do
         for test in simple ; do
            if [ "${mode}" == "extract" ] && [ "${test}" == "test2" ] ; then
               continue
            fi
            echo >&2 -e "\x1b[34m###### Testing: ${test} --${mode} --${o1} --${o2} ######\x1b[0m"

            outputFile="text-block-tests/${test}-${mode}-${o1}-${o2}.out"
            goodFile="text-block-tests/${test}-${mode}-${o1}-${o2}.good"
            if [ "${mode}" == "replace" ] || [ "${mode}" == "insert" ]  ; then
               mode2="${mode} ${insertFile}"
            else
               mode2="${mode}"
            fi
            if [ "${test}" == "simple" ] ; then
               command="${RUN} ./text-block -i text-block-tests/simple.txt -o ${outputFile} -b '<BEGIN-BLOCK>' -e '<END-BLOCK>' --${mode2} --${o1} --${o2}"

            elif [ "${test}" == "advanced1" ] ; then
               command="${RUN} ./text-block -i text-block-tests/advanced.txt -o ${outputFile} -b '<BEGIN-BLOCK>' -e '<END-BLOCK>' --${mode2} --${o1} --${o2}"
            elif [ "${test}" == "advanced2" ] ; then
               command="${RUN} ./text-block -i text-block-tests/advanced.txt -o ${outputFile} -b '<MARKER>' --${mode2} --${o1} --${o2}"
            else
               false
            fi
            sh -c "${command}"

            if [ -e "${goodFile}" ] ; then
               if ! diff --color "${goodFile}" "${outputFile}" ; then
                  failures=$((failures+1))
                  (
                     ./print-utf8 -n -s "\e[1;31;5m█" "▀" "█\e[0m" ;
                     echo "TEST FAILED!" | figlet -w 64 | ./print-utf8 -n -C "\e[1;31;5m█\e[25m" "\e[5m█\e[0m" ;
                     ./print-utf8 -n -s "\e[1;31;5m█" "▄" "█\e[0m"
                     echo "Failure #${failures}:"
                     echo "Command:${command}"
                     echo "Good:    $(basename "${goodFile}")"
                     echo "Output:  $(basename "${outputFile}")"
                     echo "Diff:"
                     diff --color "${goodFile}" "${outputFile}" || true
                  ) >&2
#                   exit 1
               else
                  echo "OK!"
               fi
            else
               echo "No good file for $(basename "${outputFile}")!"
            fi
         done
      done
   done
done
